import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Slider from "../../components/slider/slider.jsx";
import Book from "../../components/book/book.jsx";
import SideNav from "../../components/SideNav/SideNav";

const mainCategories = {
    "VƒÉn H·ªçc": ["Ti·ªÉu thuy·∫øt", "Truy·ªán ng·∫Øn", "Th∆° ca", "K·ªãch", "Ng·ª• ng√¥n"],
    "Gi√°o D·ª•c & H·ªçc Thu·∫≠t": ["S√°ch gi√°o khoa", "S√°ch tham kh·∫£o", "Ngo·∫°i ng·ªØ", "S√°ch khoa h·ªçc"],
    "Kinh Doanh & Ph√°t Tri·ªÉn B·∫£n Th√¢n": ["Qu·∫£n tr·ªã", "T√†i ch√≠nh", "Kh·ªüi nghi·ªáp", "L√£nh ƒë·∫°o", "K·ªπ nƒÉng s·ªëng"],
    "Khoa H·ªçc & C√¥ng Ngh·ªá": ["V·∫≠t l√Ω", "H√≥a h·ªçc", "Sinh h·ªçc", "C√¥ng ngh·ªá", "L·∫≠p tr√¨nh"],
    "L·ªãch S·ª≠ & ƒê·ªãa L√Ω": ["L·ªãch s·ª≠ th·∫ø gi·ªõi", "L·ªãch s·ª≠ Vi·ªát Nam", "ƒê·ªãa l√Ω"],
    "T√¥n Gi√°o & Tri·∫øt H·ªçc": ["Ph·∫≠t gi√°o", "Thi√™n Ch√∫a gi√°o", "H·ªìi gi√°o", "Tri·∫øt h·ªçc"],
    "S√°ch Thi·∫øu Nhi": ["Truy·ªán c·ªï t√≠ch", "Truy·ªán tranh", "S√°ch gi√°o d·ª•c tr·∫ª em"],
    "VƒÉn H√≥a & X√£ H·ªôi": ["Du l·ªãch", "Ngh·ªá thu·∫≠t", "T√¢m l√Ω - x√£ h·ªôi"],
    "S·ª©c Kh·ªèe & ·∫®m Th·ª±c": ["N·∫•u ƒÉn", "Dinh d∆∞·ª°ng", "Th·ªÉ d·ª•c - th·ªÉ thao"]
};

const Home = () => {
    const [books, setBooks] = useState({});
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [isHovered, setIsHovered] = useState(false);
    const navigate = useNavigate();

    useEffect(() => {
        fetchBooks();
    }, [selectedCategory]); // üî• Khi danh m·ª•c thay ƒë·ªïi, g·ªçi l·∫°i API

    const fetchBooks = async () => {
        try {
            const responses = await Promise.all(
                Object.keys(mainCategories).map(async (mainCategory) => {
                    const url = `http://localhost:8081/api/book/mainCategory/${encodeURIComponent(mainCategory)}?page=0&size=4`;
                    const response = await axios.get(url);
                    return { category: mainCategory, books: response.data }; // Return structured data
                })
            );
    
            const booksData = responses.reduce((acc, { category, books }) => {
                acc[category] = books.content || [];
                return acc;
            }, {});

            console.log(booksData)
    
            setBooks(booksData);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch s√°ch:", error);
        }
    };    

    return (
        <div className="flex">
            <SideNav onCategorySelect={setSelectedCategory} /> {/* üî• Truy·ªÅn h√†m v√†o SideNav */}
            <div className="flex-grow ml-12">
                <Slider />
                {Object.entries(books).map(([category, items]) => (
                    <div className="flex-1 p-4">
                        <div className="text-white w-full p-4 rounded-md" style={{ backgroundColor: "#003333" }}>
                            <h3 className="text-2xl">{category}</h3>
                        </div>
                        <div className="flex items-center mt-4">
                            {/* Books List */}
                            <div className="flex gap-4">
                                {items.map((book) => (
                                    <Book key={book.id} book={book} />
                                ))}
                            </div>

                            {/* Navigation Button - placed next to last book */}
                            <button
                                className={`ml-4 flex items-center justify-center bg-blue-500 hover:bg-blue-700 text-white font-bold  aspect-square rounded-full shadow-lg transition-all duration-300 ease-in-out 
                                    ${isHovered ? "w-18" : "w-12"}`}
                                onMouseEnter={() => setIsHovered(true)}
                                onMouseLeave={() => setIsHovered(false)}
                                onClick={() => navigate(`/category/${encodeURIComponent(category)}`)}
                            >
                                {isHovered ? "More" : ">"}
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default Home;
