import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Slider from "../../components/slider/slider.jsx";
import Book from "../../components/book/book.jsx";
import SideNav from "../../components/SideNav/SideNav";

const mainCategories = {
  "VƒÉn H·ªçc": ["Ti·ªÉu thuy·∫øt", "Truy·ªán ng·∫Øn", "Th∆° ca", "K·ªãch", "Ng·ª• ng√¥n"],
  "Gi√°o D·ª•c & H·ªçc Thu·∫≠t": ["S√°ch gi√°o khoa", "S√°ch tham kh·∫£o", "Ngo·∫°i ng·ªØ", "S√°ch khoa h·ªçc"],
  "Kinh Doanh & Ph√°t Tri·ªÉn B·∫£n Th√¢n": ["Qu·∫£n tr·ªã", "T√†i ch√≠nh", "Kh·ªüi nghi·ªáp", "L√£nh ƒë·∫°o", "K·ªπ nƒÉng s·ªëng"],
  "Khoa H·ªçc & C√¥ng Ngh·ªá": ["V·∫≠t l√Ω", "H√≥a h·ªçc", "Sinh h·ªçc", "C√¥ng ngh·ªá", "L·∫≠p tr√¨nh"],
  "L·ªãch S·ª≠ & ƒê·ªãa L√Ω": ["L·ªãch s·ª≠ th·∫ø gi·ªõi", "L·ªãch s·ª≠ Vi·ªát Nam", "ƒê·ªãa l√Ω"],
  "T√¥n Gi√°o & Tri·∫øt H·ªçc": ["Ph·∫≠t gi√°o", "Thi√™n Ch√∫a gi√°o", "H·ªìi gi√°o", "Tri·∫øt h·ªçc"],
  "S√°ch Thi·∫øu Nhi": ["Truy·ªán c·ªï t√≠ch", "Truy·ªán tranh", "S√°ch gi√°o d·ª•c tr·∫ª em"],
  "VƒÉn H√≥a & X√£ H·ªôi": ["Du l·ªãch", "Ngh·ªá thu·∫≠t", "T√¢m l√Ω - x√£ h·ªôi"],
  "S·ª©c Kh·ªèe & ·∫®m Th·ª±c": ["N·∫•u ƒÉn", "Dinh d∆∞·ª°ng", "Th·ªÉ d·ª•c - th·ªÉ thao"],
};

const Home = () => {
  const [books, setBooks] = useState({});
  const [discountedBooks, setDiscountedBooks] = useState([]);
  const [topSellingBooks, setTopSellingBooks] = useState([]);
  const [suggestedBooks, setSuggestedBooks] = useState([]); // State m·ªõi cho s√°ch g·ª£i √Ω
  const [discountedPage, setDiscountedPage] = useState(0);
  const [discountedTotalPages, setDiscountedTotalPages] = useState(0);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [isHovered, setIsHovered] = useState(false);
  const [onHovered, setOnHoverd] = useState(null);
  const navigate = useNavigate();

  // IMPORTANT: Replace this with the actual user ID from your authentication system
  const USER_ID = "68064b397faaf761a304742a"; 

  useEffect(() => {
    fetchBooks();
    fetchDiscountedBooks();
    fetchTopSellingBooks();
    fetchSuggestedBooks(USER_ID); // G·ªçi h√†m l·∫•y s√°ch g·ª£i √Ω
  }, [selectedCategory, discountedPage, USER_ID]); // Th√™m USER_ID v√†o dependency array

  const fetchBooks = async () => {
    try {
      const responses = await Promise.all(
        Object.keys(mainCategories).map(async (mainCategory) => {
          const url = `http://localhost:8081/api/book/mainCategory/${encodeURIComponent(
            mainCategory
          )}?page=0&size=5`;
          const response = await axios.get(url);
          return { category: mainCategory, books: response.data };
        })
      );

      const booksData = responses.reduce((acc, { category, books }) => {
        acc[category] = books.content || [];
        return acc;
      }, {});

      setBooks(booksData);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch s√°ch:", error);
    }
  };

  const fetchDiscountedBooks = async () => {
    try {
      const response = await axios.get(
        `http://localhost:8081/api/book?page=${discountedPage}&size=5`
      );
      const discounted = response.data.content.filter(
        (book) => book.percentage > 0
      );
      setDiscountedBooks(discounted);
      setDiscountedTotalPages(response.data.totalPages);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch s√°ch gi·∫£m gi√°:", error);
    }
  };

  const fetchTopSellingBooks = async () => {
    try {
      const topSellingResponse = await axios.get("http://localhost:8082/api/orders/top-selling");
      const topSellingData = topSellingResponse.data.slice(0, 5); 

      const detailedTopSellingBooks = await Promise.all(
        topSellingData.map(async (book) => {
          try {
            const detailResponse = await axios.get(`http://localhost:8081/api/book/${book.bookId}`);
            return { ...detailResponse.data, totalSold: book.totalSold }; 
          } catch (error) {
            console.error(`L·ªói khi l·∫•y chi ti·∫øt s√°ch ${book.bookId}:`, error);
            return null; 
          }
        })
      );
      setTopSellingBooks(detailedTopSellingBooks.filter(Boolean));
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch s√°ch b√°n ch·∫°y:", error);
    }
  };

  const fetchSuggestedBooks = async (userId) => {
    try {
      const purchasedBooksRes = await axios.get(`http://localhost:8082/api/orders/purchased-books/${userId}`);
      const purchasedBookIds = purchasedBooksRes.data.map(item => item.bookId);

      let allRecommendations = [];
      const uniqueRecommendedBookIds = new Set(); // Use a Set to store unique book IDs

      for (const bookId of purchasedBookIds) {
        try {
          const recommendationsRes = await axios.get(`http://localhost:8081/api/book/${bookId}/recommendations`);
          // Filter out books that have already been purchased by the user
          // and also ensure unique recommendations
          const newRecommendations = recommendationsRes.data.filter(recBook => 
            !purchasedBookIds.includes(recBook.bookId) && 
            !uniqueRecommendedBookIds.has(recBook.bookId)
          );
          
          newRecommendations.forEach(recBook => uniqueRecommendedBookIds.add(recBook.bookId));
          allRecommendations = [...allRecommendations, ...newRecommendations];
        } catch (error) {
          console.error(`L·ªói khi l·∫•y g·ª£i √Ω cho s√°ch ${bookId}:`, error);
        }
      }
      setSuggestedBooks(allRecommendations);
    } catch (error) {
      console.error("L·ªói khi l·∫•y s√°ch ƒë√£ mua ƒë·ªÉ g·ª£i √Ω:", error);
      setSuggestedBooks([]);
    }
  };

  const handleNextPage = () => {
    if (discountedPage < discountedTotalPages - 1) {
      setDiscountedPage(discountedPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (discountedPage > 0) {
      setDiscountedPage(discountedPage - 1);
    }
  };

  return (
    <div className="grid grid-cols-4 gap-4 p-4">
      {/* Ph·∫ßn tr√™n: SideNav + Slider */}
      <div className="col-span-1 !ml-30">
        <SideNav onCategorySelect={setSelectedCategory} />
      </div>
      <div className="col-span-3 !ml-2 !mr-30">
        <Slider />

        {/* Khung s√°ch gi·∫£m gi√° */}
        <div className="border border-gray-300 shadow-md rounded-lg p-4 bg-white relative mt-4">
          <div className="absolute -top-1 left-1/2 -translate-x-1/2 bg-red-600 text-white px-4 py-1 rounded-md text-lg font-bold shadow-md">
            Gi·∫£m gi√° s·ªëc
            <div className="absolute -left-2 top-1/2 -translate-y-1/2 w-4 h-4 bg-red-600 rotate-45"></div>
            <div className="absolute -right-2 top-1/2 -translate-y-1/2 w-4 h-4 bg-red-600 rotate-45"></div>
          </div>

          <div className="flex overflow-x-auto mt-6">
            {discountedBooks.map((book) => (
              <Book key={book.bookId} book={book} />
            ))}
          </div>

          <div className="absolute inset-y-0 left-0 flex items-center">
            <button
              onClick={handlePrevPage}
              disabled={discountedPage === 0}
              className="px-3 py-2 mx-2 bg-gray-200 !rounded-full"
            >
              &lt;
            </button>
          </div>
          <div className="absolute inset-y-0 right-0 flex items-center">
            <button
              onClick={handleNextPage}
              disabled={discountedPage === discountedTotalPages - 1}
              className="px-3 py-2 mx-2 bg-gray-200 !rounded-full"
            >
              &gt;
            </button>
          </div>
        </div>
      </div>

      {/* Ph·∫ßn d∆∞·ªõi: Hi·ªÉn th·ªã c√°c danh m·ª•c s√°ch, S√°ch B√°n Ch·∫°y Nh·∫•t, v√† G·ª£i √Ω */}
      <div className="col-span-4 !ml-30 !mr-30 !mt-2"> 
        {/* Khung s√°ch b√°n ch·∫°y nh·∫•t */}
        <div className="border border-gray-300 shadow-md rounded-lg p-4 bg-white relative mt-4">
          <div className="absolute -top-1 left-1/2 -translate-x-1/2 bg-blue-600 text-white px-4 py-1 rounded-md text-lg font-bold shadow-md">
            S√°ch B√°n Ch·∫°y Nh·∫•t üöÄ
            <div className="absolute -left-2 top-1/2 -translate-y-1/2 w-4 h-4 bg-blue-600 rotate-45"></div>
            <div className="absolute -right-2 top-1/2 -translate-y-1/2 w-4 h-4 bg-blue-600 rotate-45"></div>
          </div>

          <div className="flex overflow-x-auto mt-6">
            {topSellingBooks.length > 0 ? (
              topSellingBooks.map((book) => (
                <Book key={book.bookId} book={book} />
              ))
            ) : (
              <p className="p-4 text-gray-600">ƒêang t·∫£i s√°ch b√°n ch·∫°y nh·∫•t ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu.</p>
            )}
          </div>
        </div>

        {/* Khung s√°ch g·ª£i √Ω */}
        <div className="border border-gray-300 shadow-md rounded-lg p-4 bg-white relative mt-4">
          <div className="absolute -top-1 left-1/2 -translate-x-1/2 bg-purple-600 text-white px-4 py-1 rounded-md text-lg font-bold shadow-md">
            G·ª£i √Ω cho b·∫°n ‚ú®
            <div className="absolute -left-2 top-1/2 -translate-y-1/2 w-4 h-4 bg-purple-600 rotate-45"></div>
            <div className="absolute -right-2 top-1/2 -translate-y-1/2 w-4 h-4 bg-purple-600 rotate-45"></div>
          </div>

          <div className="flex overflow-x-auto mt-6">
            {suggestedBooks.length > 0 ? (
              suggestedBooks.map((book) => (
                <Book key={book.bookId} book={book} />
              ))
            ) : (
              <p className="p-4 text-gray-600">ƒêang t√¨m g·ª£i √Ω s√°ch d√†nh cho b·∫°n...</p>
            )}
          </div>
        </div>


        {/* C√°c danh m·ª•c s√°ch */}
        {Object.entries(books).map(([category, items]) => (
          <div
            key={category}
            className="border border-gray-300 rounded-lg shadow-md bg-white mt-2"
          >
            <div
              className="text-white w-full !p-2 rounded-t-md"
              style={{ backgroundColor: "#075990" }}
            >
              <h3 className="!text-xl p-1 flex items-center">
                <span role="img" aria-label="book" className="mr-2">
                  üìñ
                </span>
                {category}
              </h3>
            </div>
            <div className="flex items-center mt-2 p-0">
              <div className="flex overflow-x-auto">
                {items.map((book) => (
                  <Book key={book.bookId} book={book} />
                ))}
              </div>
              <button
                className={`!ml-4 flex items-center justify-center aspect-square !rounded-full transition-all duration-300 ease-in-out ${
                  isHovered && onHovered == category
                    ? "border-2 border-cyan-800 bg-cyan-800 text-white w-18"
                    : "border border-gray-800 bg-transparent text-gray-500 w-12"
                }`}
                onMouseEnter={() => {setIsHovered(true); setOnHoverd(category)}}
                onMouseLeave={() => {setIsHovered(false)}}
                onClick={() => navigate(`/category/${encodeURIComponent(category)}`)}
              >
                {isHovered && onHovered == category? "More..." : ">"}
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Home;