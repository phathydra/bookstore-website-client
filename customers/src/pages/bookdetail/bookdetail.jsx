import React, { useEffect, useState } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import axios from "axios";

const BookDetail = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [book, setBook] = useState(null);
    const [recommendedBooks, setRecommendedBooks] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [quantity, setQuantity] = useState(1);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalContent, setModalContent] = useState("");

    useEffect(() => {
        if (!id) {
            setError("Kh√¥ng c√≥ ID s√°ch.");
            setLoading(false);
            return;
        }

        const fetchBook = async () => {
            try {
                const response = await axios.get(`http://localhost:8081/api/book/${id}`);
                setBook(response.data);
            } catch (err) {
                setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s√°ch.");
                openModal("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s√°ch.");
            } finally {
                setLoading(false);
            }
        };

        const fetchRecommendedBooks = async () => {
            try {
                const response = await axios.get(`http://localhost:8081/api/book/${id}/recommendations`);
                setRecommendedBooks(response.data);
            } catch (err) {
                console.error("L·ªói t·∫£i s√°ch ƒë·ªÅ xu·∫•t:", err);
            }
        };

        fetchBook();
        fetchRecommendedBooks();
    }, [id]);

    const handleIncrease = () => {
        if (book && quantity < book.bookStockQuantity) {
            setQuantity((prev) => prev + 1);
        }
    };

    const handleDecrease = () => {
        if (quantity > 1) setQuantity((prev) => prev - 1);
    };

    const addToCart = async () => {
        if (!book) return;

        const accountId = localStorage.getItem("accountId");
        if (!accountId) {
            alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!");
            navigate("/login");
            return;
        }

        if (book.bookStockQuantity <= 0) {
            alert("S√°ch n√†y ƒë√£ h·∫øt h√†ng!");
            return;
        }

        const cartData = {
            accountId: accountId,
            cartItems: [{
                bookId: book.bookId,
                bookName: book.bookName,
                price: parseFloat(book.bookPrice),
                quantity: quantity,
                bookImage: book.bookImage
            }]
        };

        try {
            const response = await axios.post("http://localhost:8082/cart/add", cartData);
            if (response.status === 200) {
                alert("S√°ch ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!");
                navigate("/cart");
            } else {
                alert("Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i! H√£y th·ª≠ l·∫°i.");
            }
        } catch (error) {
            console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error.response?.data || error.message);
            alert("C√≥ l·ªói x·∫£y ra khi th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!");
        }
    };

    // Modal control functions
    const openModal = (content) => {
        setModalContent(content);
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
    };

    const handlePolicyClick = (policy) => {
        switch (policy) {
            case "Th·ªùi gian giao h√†ng":
                openModal("Th√¥ng tin ƒë√≥ng g√≥i, v·∫≠n chuy·ªÉn h√†ng\n\nV·ªõi ƒëa ph·∫ßn ƒë∆°n h√†ng, Fahasa.com c·∫ßn v√†i gi·ªù l√†m vi·ªác ƒë·ªÉ ki·ªÉm tra th√¥ng tin v√† ƒë√≥ng g√≥i h√†ng. N·∫øu c√°c s·∫£n ph·∫©m ƒë·ªÅu c√≥ s·∫µn h√†ng, Fahasa.com s·∫Ω nhanh ch√≥ng b√†n giao cho ƒë·ªëi t√°c v·∫≠n chuy·ªÉn. N·∫øu ƒë∆°n h√†ng c√≥ s·∫£n ph·∫©m s·∫Øp ph√°t h√†nh, Fahasa.com s·∫Ω ∆∞u ti√™n giao nh·ªØng s·∫£n ph·∫©m c√≥ h√†ng tr∆∞·ªõc cho Qu√Ω kh√°ch h√†ng.");
                break;
            case "Ch√≠nh s√°ch ƒë·ªïi tr·∫£":
                openModal("ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ to√†n qu·ªëc\n\nS·∫£n ph·∫©m c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·ªïi tr·∫£ mi·ªÖn ph√≠ n·∫øu c√≥ l·ªói t·ª´ nh√† s·∫£n xu·∫•t.");
                break;
            case "Ch√≠nh s√°ch kh√°ch s·ªâ":
                openModal("∆Øu ƒë√£i khi mua s·ªë l∆∞·ª£ng l·ªõn\n\nFahasa.com cung c·∫•p ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho kh√°ch h√†ng mua h√†ng s·ªë l∆∞·ª£ng l·ªõn.");
                break;
            default:
                break;
        }
    };

    if (loading) return <div className="text-center py-10 text-lg">ƒêang t·∫£i...</div>;
    if (error) return <div className="text-center py-10 text-red-500">{error}</div>;
    if (!book) return <div className="text-center py-10 text-gray-600">S√°ch kh√¥ng t·ªìn t·∫°i.</div>;

    return (
        <div className="container mx-auto px-4 py-6">
            <div className="flex flex-col md:flex-row bg-white shadow-lg rounded-lg overflow-hidden border p-5">
                <div className="md:w-1/3 flex flex-col items-center">
                    <img src={book.bookImage} alt={book.bookName} className="w-72 h-auto rounded-lg shadow-md" />

                    <div className="flex items-center !space-x-2 mt-4">
                        <div className="flex items-center bg-gray-300 rounded-xl px-3 py-2 text-lg font-semibold w-[140px] h-14 justify-between">
                            <button onClick={handleDecrease} className="px-2 py-1">-</button>
                            <span className="px-4">{quantity}</span>
                            <button onClick={handleIncrease} className="px-2 py-1">+</button>
                        </div>

                        <button className="px-6 py-3 bg-blue-600 text-white text-lg font-semibold !rounded-xl hover:bg-blue-700 transition" onClick={addToCart}>
                            üõí Th√™m v√†o gi·ªè h√†ng
                        </button>
                    </div>

                    <div className="mt-4 p-4 bg-gray-100 rounded-lg text-gray-700 text-sm">
                        <h3 className="font-semibold text-base">Ch√≠nh s√°ch mua h√†ng</h3>
                        <div className="space-y-2">
                            <button onClick={() => handlePolicyClick("Th·ªùi gian giao h√†ng")} className="text-blue-600">Th·ªùi gian giao h√†ng: Giao nhanh v√† uy t√≠n</button>
                            <button onClick={() => handlePolicyClick("Ch√≠nh s√°ch ƒë·ªïi tr·∫£")} className="text-blue-600">Ch√≠nh s√°ch ƒë·ªïi tr·∫£: ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ to√†n qu·ªëc</button>
                            <button onClick={() => handlePolicyClick("Ch√≠nh s√°ch kh√°ch s·ªâ")} className="text-blue-600">Ch√≠nh s√°ch kh√°ch s·ªâ: ∆Øu ƒë√£i khi mua s·ªë l∆∞·ª£ng l·ªõn</button>
                        </div>
                    </div>
                </div>

                <div className="hidden md:block border-l-2 border-gray-300 mx-4"></div>

                <div className="md:w-2/3 p-5">
                    <div className="w-full">
                        <h2 className="!text-2xl font-bold text-gray-800 mb-2 w-full !text-left">{book.bookName}</h2>
                        <h2 className="!text-lg font-bold !text-red-600 mb-4 w-full !text-left">{book.bookPrice.toLocaleString()} VNƒê</h2>

                        <p className="!text-lg mb-2 flex items-center">
                            <span className="px-2 py-1 bg-blue-400 text-white rounded-lg font-semibold text-lg min-w-[720px] text-center">
                                {`${book.bookStockQuantity} s·∫£n ph·∫©m c√≤n`}
                            </span>
                        </p>

                        <hr className="my-4 border-gray-300" />

                        <p className="text-lg text-gray-800 mb-2"><strong>TH√îNG TIN CHI TI·∫æT</strong></p>
                        <p className="text-base text-gray-600 mb-2"><strong>T√°c gi·∫£:</strong> {book.bookAuthor}</p>
                        <p className="text-base text-gray-600 mb-2"><strong>Nh√† xu·∫•t b·∫£n:</strong> {book.bookPublisher}</p>
                        <p className="text-base text-gray-600 mb-2"><strong>NƒÉm xu·∫•t b·∫£n:</strong> {book.bookYearOfProduction}</p>
                        <p className="text-base text-gray-600 mb-2"><strong>Ng√¥n ng·ªØ:</strong> {book.bookLanguage}</p>
                        <p className="text-base text-gray-600 mb-2"><strong>Th·ªÉ lo·∫°i:</strong> {book.bookCategory}</p>
                        <p className="text-base text-gray-600 mb-2"><strong>Nh√† cung c·∫•p:</strong> {book.bookSupplier}</p>

                        <hr className="my-4 border-gray-300" />
                        <div className="mt-5">
                            <h3 className="text-xl font-semibold border-b pb-2">M√î T·∫¢ S√ÅCH</h3>
                            <p className="text-base text-gray-600 mt-4">{book.bookDescription}</p>
                        </div>
                    </div>
                </div>
            </div>

            <div className="mt-8">
                <h3 className="text-xl font-semibold border-b pb-2">GI·ªöI THI·ªÜU CHO B·∫†N</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                    {recommendedBooks.length > 0 ? (
                        recommendedBooks.map((recBook) => (
                            <Link key={recBook.bookId} to={`/productdetail/${recBook.bookId}`} className="block bg-white shadow-lg rounded-lg overflow-hidden p-4 border">
                                <img src={recBook.bookImage} alt={recBook.bookName} className="w-full h-52 object-cover rounded-lg" />
                                <p className="mt-2 text-center text-base font-semibold text-gray-700">{recBook.bookName}</p>
                            </Link>
                        ))
                    ) : (
                        <p className="text-gray-500">Kh√¥ng c√≥ s√°ch ƒë·ªÅ xu·∫•t.</p>
                    )}
                </div>
            </div>

            {/* Modal */}
            {isModalOpen && (
                <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50">
                    <div className="bg-white p-6 rounded-lg shadow-lg w-96 max-h-[80vh] overflow-y-auto z-10 relative">
                        <button 
                            onClick={closeModal} 
                            className="absolute top-2 right-2 px-4 py-2 bg-red-600 text-white rounded-full"
                        >
                            ƒê√≥ng
                        </button>
                        <h2 className="text-xl font-semibold mb-4">{modalContent}</h2>
                    </div>
                </div>
            )}

        </div>
    );
};

export default BookDetail;
